package algorithm.boj;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class BOJ10026_적룍색약 {

	// RGB
	// N*N 각 칸에 R,G,B중 하나를 색칠
	// 상하좌우 인접해 있는 경우 두 글자는 같은 구역에 속함
	static int[] dy = { -1, 1, 0, 0 };
	static int[] dx = { 0, 0, -1, 1 };
	static boolean[][] visit;
	static char RGB[][];
	static int N;
	static int ans[];
	static Queue<Node> queue = new LinkedList<Node>();

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		RGB = new char[N][N];
		visit = new boolean[N][N];
		for (int i = 0; i < N; i++) {
			RGB[i] = br.readLine().toCharArray();
		}

		notJucklok(0, 0, RGB[0][0]);

		isJucklok();

	}

	static void notJucklok(int y, int x, char color) {
		// 상하좌우 인접하면 visit에 같은 숫자 저장, 다른 숫자 등장하면 +1 visitcheck필요

		queue.offer(new Node(y, x, color));
		visit[y][x] = true;
		while (!queue.isEmpty()) {
			Node node = queue.poll();
			char color1 = node.color;
			
			for (int i = 0; i < 4; i++) {
				int ny = node.y + dy[i];
				int nx = node.x + dx[i];

				if (ny < 0 || nx < 0 || ny >= N || nx >= N || visit[ny][nx]) continue;
				
				if(RGB[ny][nx] == color1) {
					queue.offer(new Node(y, x, color1));
				}
				
			}
		}

	}

	static void isJucklok() {

	}

	static class Node {
		int y, x;
		char color;

		public Node(int y, int x, char color) {
			this.y = y;
			this.x = x;
			this.color = color;
		}

	}
}
