package algorithm;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.StringTokenizer;

public class boj2644_촌수계산 {
	///관계없으면 -1
	//사람 수 n명
	//촌 수 계산해야하는 서로 다른 두 사람의 번호 p1, p2
	//부모 자신들 간의 관계의 개수 m
	//부모 자식들 간의 관계를 나타내는 두 번호 x, y
	//
	static int N, M, x, y, p1, p2;
	static int map[][];
	static boolean visit[];
	static Queue<Node> que = new LinkedList<Node>();
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		StringTokenizer st = new StringTokenizer(br.readLine());
		p1 = Integer.parseInt(st.nextToken());
		p2 = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(br.readLine());
		map = new int[N+1][N+1];
		visit = new boolean[N+1];
		
		for(int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			x = Integer.parseInt(st.nextToken());
			y = Integer.parseInt(st.nextToken());
			
			map[x][y] = 1;
			map[y][x] = 1;
		}
		
		System.out.println(bfs(p1,p2));
		
	}

	
	static int bfs(int p1, int p2) {
        que.offer(new Node(p1, 0));
        visit[p1] = true;
        while(!que.isEmpty()) {
        	Node n = que.poll();
        	int newp = n.x;//새로 들어온 x값이 newp에 저장
        	if(newp == p2) {//상대촌수값이랑 같으면 나간다!
        		return n.cnt;
        	}
        	
        	for(int i = 1; i <= N; i++) {
        		if(map[newp][i] == 1 && !visit[i]) {
        			visit[i] = true;
        			que.offer(new Node(i, n.cnt+1));
        		}
        	}
        	
        	
        }
        
        return -1;
        
    }

    static class Node {
        int x;
        int cnt;

        public Node(int x, int cnt) {
            this.x = x;
            this.cnt = cnt;
        }
    }
	
}
