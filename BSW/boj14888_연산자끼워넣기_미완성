import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class boj14888_연산자끼워넣기{
	// N개의 수열 입력받음
	// 수와 수 사이에 끼워넣을 수 있는 N-1개의 연산자 주어짐(+,-, x, /)
	// 만둘 수 있는 식의 결과가 최대인 것과 최소인 것
	// 연산자 우선순위 무시

	static int N;
	static int A[];
	static int op[];
	static boolean visited[] = new boolean[4];
	static int min = Integer.MAX_VALUE;
	static int max = Integer.MIN_VALUE;

	static int dap;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		A = new int[N];
		op = new int[4];

		StringTokenizer st = new StringTokenizer(br.readLine(), " ");

		for (int n = 0; n < N; n++) {
			A[n] = Integer.parseInt(st.nextToken());
		}
		st = new StringTokenizer(br.readLine(), " ");
		for (int n = 0; n < 4; n++) {
			op[n] = Integer.parseInt(st.nextToken()); // 0번부터 + - X / 순서
			if (op[n] != 0) {
				visited[n] = true;
			}
		}
		dap = A[0];
		bt(1);

		System.out.println(max);
		System.out.println(min);

	}

	static void bt(int deep) {

		if (deep == N) {
			if (dap < min) {
				min = dap;
			}
			if (dap > max) {
				max = dap;
			}
			dap = A[0];
			return;
		}

		for (int i = 0; i < 4; i++) { //계산 연산자 배열 크기만큼 도는데
			if (op[i] != 0) { // 0이 아니면 즉 계산 값이 있으면
				op[i]--; //- 감소시키고
				switch (i) {
				case 0: // + 일 떄
					dap += A[deep];
					break;
				case 1: // - 일 떄
					dap -= A[deep];
					break;
				case 2: // * 일 떄
					dap *= A[deep];
					break;
				case 3: // / 일 떄
					if (dap < 0) {
						dap = dap * -1; // 나누어지는 값이 음수이면 양수로 바꾼 후
						dap /= A[deep]; // 계산
						dap = dap * -1; // 다시 양수로 변경
					} else {
						dap /= A[deep];
					}
					break;
				}
				bt(deep + 1);
				
				op[i]++;//- 했던거 다시 + 시켜줘서 다시 계산할 수 있게끔
			}

		}
	}
}
//문제 - 1,2번째 테스트케이스 까지는 되는데 3번째 테스트 케이스 안됨..! 재귀 돌아갈 때 dap 값을 이전으로 돌려야 하는데 A[0]으로 바꾸는 점이
//문제인 것 같긴 한데.. 어떻게 돌려야 할지 계속 고민 중
