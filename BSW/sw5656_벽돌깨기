package algorithm.swep;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class SW5656_벽돌깨기 {

	static int N, W, H, result, byukdol, max;
	static int[][] map;

	static int dy[] = { 1, -1, 0, 0 };
	static int dx[] = { 0, 0, 1, -1 };

	public static void main(String[] args) throws Exception {
		//백트래킹
		//부슨 벽돌 개수 temp에 저장 -> 초기화 -> 저장->초기화 

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		for (int tc = 1; tc <= T; tc++) {
			StringTokenizer st = new StringTokenizer(br.readLine());

			N = Integer.parseInt(st.nextToken());
			W = Integer.parseInt(st.nextToken());
			H = Integer.parseInt(st.nextToken());
			map = new int[H][W];
			for (int i = 0; i < H; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < W; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
					if (map[i][j] != 0)
						byukdol++;
				}
			}

			play(0);
			int res = byukdol - max;
			System.out.println("#" + tc + " " + res);
		}
	}

	static void play(int cnt) {
		if (cnt == N) {
			max = Math.max(max, result);
			return;
		}
		int temp[][] = new int[H][W];
		for (int j = 0; j < H; j++)
			temp[j] = map[j].clone();
		int tres = result;
		for (int i = 0; i < W; i++) {
			dolDrop(i);
			play(cnt + 1);
			result = tres;
			for (int j = 0; j < H; j++)
				map[j] = temp[j].clone();
		}

	}

	static void dolDrop(int w) {
		for (int i = 0; i < H; i++) {
			if (map[i][w] != 0) {
				pomp(i, w);
				drop();
				break;
			}
		}
	}

	static void drop() {
		for (int i = 0; i < W; i++) {
			for (int j = H - 1; j >= 0; j--) {
				if (map[j][i] == 0) {
					for (int k = j - 1; k >= 0; k--) {
						if (map[k][i] != 0) {
							map[j][i] = map[k][i];
							map[k][i] = 0;
							break;
						}
					}
				}
			}
		}
	}

	static void pomp(int x, int y) {
		int size = map[x][y];
		map[x][y] = 0;
		result++;
		for (int d = 0; d < 4; d++) {
			int row = x;
			int col = y;
			for (int s = 1; s < size; s++) {
				row = row + dy[d];
				col = col + dx[d];

				if (row < 0 || col < 0 || row >= H || col >= W)
					break;
				if (map[row][col] == 0)
					continue;
				if (map[row][col] > 1) {
					pomp(row, col);
					continue;
				}
				result++;
				map[row][col] = 0;
			}
		}
	}

}
