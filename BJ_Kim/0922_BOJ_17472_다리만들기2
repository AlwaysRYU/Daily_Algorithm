import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static class Edge implements Comparable<Edge> {
		int start,end,weight; //시작,도착,가중치
		
		public Edge(int start,int end,int weight) {
			this.start = start;
			this.end = end;
			this.weight = weight;
		}
		
		@Override
		public int compareTo(Edge o) {
			return Integer.compare(this.weight, o.weight);
		}
	}
	
	static int y,x,count; //count : 섬의 넘버
	static boolean[][] visit;
	static int[][] ar;
	static int[] dy = {-1,1,0,0};
	static int[] dx = {0,0,-1,1};
	static ArrayList<Edge> li = new ArrayList<Edge>(); //간선 리스트
	static Queue<int[]> q = new LinkedList<>();
	public static void main(String[] args) throws Exception {
		//방향 변경 x
		//다리는 섬에서 섬으로 가야 함
		//다리의 길이는 1 이상이어야 함.
		//두 다리가 한 곳에서 교차되는 경우, 그 곳의 다리 값은 2가 나옴.
		//한 정점으로 다른 정점으로 가는 최소 비용을 구해야 함 ==> 크루스칼,프림,다익스트라
		//모든 정점에서 모든 정점으로 가는 최소 비용 ==> 플로이드 와샬
		//2차원 배열을 그래프 형태로 바꿔줘야 함. ==> 크루스칼 및 프림을 써야 풀 수 있음.
		//각 섬을 정점으로 봐야 함.(섬1 : v1 / 섬2 : v2 / 섬3 : v3/..../ 섬n : vn
		//간선(비용 : 다리 길이)
		
		//1. 정점 확인 ==> 각각 구별 가능한 영역으로 표시
		//2. 간선(비용 확인)
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		y = Integer.parseInt(st.nextToken());
		x = Integer.parseInt(st.nextToken());
		ar = new int[y][x];
		visit = new boolean[y][x];
		for (int i = 0; i < y; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < x; j++) {
				ar[i][j] = Integer.parseInt(st.nextToken());
			}
		} //입력 끝
		
		//1. 각 섬을 구별하기 위해 구역별로 섬을 지정해줘야 함.(bfs사용)
		for (int i = 0; i < y; i++) {
			for (int j = 0; j < x; j++) {
				if(ar[i][j] ==1 && !visit[i][j]) {
					count++; //섬의 넘버
					bfs(i,j,count);
				}
			}
		}
//		for (int i = 0; i < y; i++) {
//			for (int j = 0; j < x; j++) {
//				System.out.print(ar[i][j] + " ");
//			}
//			System.out.println();
//		}
		
		//이 시점의 count: 섬의 개수(정점의 개수)
		//간선 구하기(섬에서 섬으로 갈 수 있는지?)
		//(0922)모든 섬을 연결했는지 검사하는 코드가 필요한가?
		for (int i = 0; i < y; i++) {
			for (int j = 0; j < x; j++) {
				if(ar[i][j] != 0) { // 섬일 때
					int startisland = ar[i][j];
//					System.out.println(startisland);
					for (int k = 0; k < 4; k++) {
						int ny = i + dy[k];
						int nx = j + dx[k];
						if(ny < 0 || nx < 0 || ny >= y || nx >= x) continue;
						if(ar[ny][nx] == 0) {
//							System.out.println(ny + " " + nx);
							int linecount = 0;
							while(true) {
								ny = ny + dy[k];
								nx = nx + dx[k];
//								System.out.println(ny + " " + nx);
								linecount++;
								if(ny < 0 || nx < 0 || ny >= y || nx >= x) break;
								if(ar[ny][nx] != 0) { // 이어지는 섬에 도착했을 경우
									int arriveisland = ar[ny][nx];
//									System.out.println(arriveisland);
									if(linecount >=2)
									{
										li.add(new Edge(startisland,arriveisland,linecount)); // 설치 가능한 다리면 간선 리스트에 추가
										break;
									}
									break;
								}
							}
						}
					}
				}
			}
		}
//		for (Edge edge : li) {
//			System.out.println(edge.start + " " + edge.end + " " + edge.weight);
//		}
		//크루스칼 적용
		Collections.sort(li);
		make();
		int cnt = 0, result = 0;
		for (Edge edge : li) {
			if(union(edge.start,edge.end)) {
				result += edge.weight;
				cnt +=1;
				if(cnt == count-1) break; // union이 성립된 간선 수가 V-1 ==> 신장트리 완성
			}
		}
		if(cnt != count-1) result = -1;
		System.out.println(result);
	}
	
static int[] parents; // 부모원소를 관리(트리처럼 사용)
	
	private static void make() {
		parents = new int[count+1];
		//모든 원소를 자신을 대표자로 만듦
		for (int i = 1; i <= count; i++) {
			parents[i] = i;
		}
	}
	
	// a가 속한 집합의 대표자 찾기
	private static int find(int a) {
		if(a ==parents[a]) return a;
		return parents[a] = find(parents[a]); //자신이 속한 집합의 대표자를 자신의 부모로 삼음 : path compression
	}
	
	//두 원소를 하나의 집합으로 합치기(대표자를 이용해서 합침)
	private static boolean union(int a,int b) {
		int aRoot = find(a);
		int bRoot = find(b);
		if(aRoot == bRoot) return false; //이미 같은 집합이면 합치지 않음
		
		parents[bRoot] = aRoot;
		return true;
	}
	
	
	
	static void bfs(int ynum,int xnum,int count) { // 섬 넘버링을 위한 bfs
		q.offer(new int[] {ynum,xnum});
		ar[ynum][xnum] = count;
		visit[ynum][xnum] = true;
		while(!q.isEmpty()) {
			int[] num = q.poll();
			for (int i = 0; i < 4; i++) {
				int ny = num[0] + dy[i];
				int nx = num[1] + dx[i];
				if(ny < 0 || nx < 0 || ny >= y || nx >= x || visit[ny][nx]) continue;
				if(ar[ny][nx] == 1 && !visit[ny][nx]) {
					ar[ny][nx] = count; //발견된 지역과 붙어있는 모든 지역은 해당 섬으로 처리
					visit[ny][nx] = true;
					q.offer(new int[] {ny,nx});
				}
			}
		}
	}
}
